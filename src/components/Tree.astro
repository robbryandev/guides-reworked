---
export type SegmentTreeValue = {
  id: string;
  name: string;
  sub: string[];
};

export interface Props {
  data: SegmentTreeValue[];
}

const props = Astro.props;

function capitalize(val: string) {
  if (!val.length || val.length === 1) {
    return val.toUpperCase();
  }

  const res: string[] = [];
  const words = val.split("_");

  for (let i = 0; i < words.length; i++) {
    let word = words[i];

    if (word === "a") {
      res.push(word);
      continue;
    }

    if (word.includes("-")) {
      word = word.replace("-", ".");
    }

    const chars = word.split("");
    const first = chars.shift();
    res.push(first?.toUpperCase() + chars.join(""));
  }

  return res.join(" ");
}
---

<ul
  class="absolute overflow-y-scroll md:overflow-y-auto top-26 md:top-2 py-8 pl-18 bg-black md:bg-transparent w-full md:w-auto"
>
  <li class="hover:text-neutral-400">
    <a href={`#site-nav`}>Site Navigation</a>
  </li>
  <li class="hover:text-neutral-400">
    <a href={`#live-stream`}>Live Stream</a>
  </li>
  {
    props.data.map((data) => {
      return data.sub.length > 0 ? (
        <>
          <li class="hover:text-neutral-400">
            <a href={`#${data.id}`}>{data.name}</a>
          </li>
          {data.sub.map((subEntry) => {
            return (
              <li class="hover:text-neutral-400 pl-4">
                <a href={`#${subEntry}`}>{capitalize(subEntry)}</a>
              </li>
            );
          })}
        </>
      ) : (
        <li class="hover:text-neutral-400">
          <a href={`#${data.id}`}>{data.name}</a>
        </li>
      );
    })
  }
</ul>

<style>
  ul {
    white-space: nowrap;
  }
</style>
